CS-546 Lab 4
MongoDB
For this lab, we are going to make a few parts of a movie database. You will create the first of these data modules, the module to handle a listing of movies.

You will:
Separate concerns into different modules.
Store the database connection in one module.
Define and store the database collections in another module.
Define your Data manipulation functions in another module. 
Continue practicing the usage of async / await for asynchronous code
Continuing our exercises of linking these modules together as needed
Packages you will use:
You will use the mongodb (Links to an external site.) package to hook into MongoDB


# # Database Structure
You will use a database with the following structure:

The database will be called FirstName_LastName_lab4
The collection you use will be called movies
movies
The schema for a movie is as followed:

{
    _id: ObjectId, 
    title: string,
    plot: string,
    genres: [strings],
    rating: string,
    studio: string,
    director: string,
    castMembers: [strings],
    dateReleased: string representation of a date
    runtime: string
    
}

# # movies.js
In movies.js, you will create and export five methods:

Remember, you must export methods named precisely as specified. The async keyword denotes that this is an async method.

async createMovie(title, plot, genres, rating, studio, director, castMembers, dateReleased, runtime);
This async function will return to the newly created movie object, with all of the properties listed above.

-> If title, plot, genres, rating, studio, director, castMembers, dateReleased, runtime are not provided at all, the method should throw. (All fields need to have valid values);

-> If title, plot, rating, studio, director, dateReleased, runtime are not strings or are empty strings, the method should throw.

-> title must be at least two characters and can contain letters a-z, A-Z or numbers. i.e. the movie "42" about Jackie Robinson. No special characters or punctuation.

-> studio must be at least 5 characters long and only letters a-z or A-Z. No numbers or special characters.

-> director must have the following format "first name space last name" i.e "Patrick Hill". first name and last name must be at least 3 characters each and only letters a-z or A-Z. No numbers or special characters or punctuation.

-> If rating is not one of the following values, this method will throw. Valid values (case sensitive): G, PG, PG-13, R, NC-17

-> If genres is not an array that has at least one string element contained in it, this method will throw.

-> If any of the elements in genres is not a valid string  (empty strings or strings with just spaces are invalid ), the method should throw.

-> Each element in genres must be at least five characters long and only letters a-z or A-Z. No numbers or special characters or punctuation.

-> If castMembers is not an array that has at least one string element contained in it, this method will throw.

-> If any of the elements in castMembers is not a valid string (empty strings or strings with just spaces are invalid ), the method should throw.

-> Each element in castMembers must have the following format "first name space last name" i.e "Patrick Hill". first name and last name must be at least 3 characters each and only letters a-z or A-Z. No numbers or special characters.

-> If dateReleased is not a valid date string (09/31/2019 is not valid as there are not 31 days in September. 02/30/2020 is not valid as there are not 30 days in February this field MUST be a valid date), or if dateReleased is less than 01/01/1900 or greater than the current year + 2 (2024 in this case) the the method should throw.  You do not have to take leap years into account and the format of the date must be in mm/dd/yyyy format. 
Note: so only years 1900-2024 are valid values.  Do not hardcode the year to be 2024, use the current year and then add 2 years to it. This will ensure that the application will function past 2024).

-> runtime MUST be in the following format "#h #min".  both #'s must be a positive whole number, but for minutes, that may be zero but the max value for min should be 59 since 60min would be 1 hour:

For example: valid: "2h 30min", "2h 0min", "1h 59min" not valid: "-5h 20min", "3.5h 10min", "0h 30min" (most movies are longer than an 30 min, and usually longer than 1 hour), "2h 60min" (this should just be 3 hours).  This field will be case sensitive so you MUST match the format shown exactly. 

Note:  FOR ALL INPUTS: Strings with empty spaces are NOT valid strings.  So no cases of "    " are valid. 
This Movie will be stored in the movies collection.
If the movie cannot be created, the method should throw.
Notice the output does not have ObjectId() around the ID field and no quotes around the key names.

1. async getAllMovies();
This function will return an array of all movies in the collection.
If there are no movies in your DB, this function will return an empty array.
Would return and log all the movies in the database.

2. async getMovieById(id);
When given an id, this function will return a movie from the database. 
If no id is provided, the method should throw.
If the id provided is not a string, or is an  empty string, the method should throw.
If the id  provided is not a valid ObjectId, the method should throw
If the no movie exists with that id, the method should throw.
Would return and log The Breakfast Club

*** Important note:  The ID field that MongoDB generates is an ObjectId.  This function takes in a string representation of an ID as the id parameter.  
You will need to convert it to an ObjectId in your function before you query the DB for the provided ID and then pass that converted value to your query.

3.async removeMovie(id)
This function will remove the movie from the database.
If no id is provided, the method should throw.
If the id provided is not a string, or is an empty string the method should throw.
If the id provided is not a valid ObjectId, the method should throw
If the movie cannot be removed (does not exist), the method should throw.
If the removal succeeds, return the name of the movie and the text " has been successfully deleted!"

*** Important note:  The ID field that MongoDB generates is an ObjectId.  This function takes in a string representation of an ID as the id parameter.  
You will need to convert it to an ObjectId in your function before you query the DB for the provided ID.

4. async renameMovie(id, newName)
This function will update the name of the movie currently in the database.
If no id is provided, the method should throw.
If the id provided is not a string, or is an empty string the method should throw.
If the id provided is not a valid ObjectId, the method should throw.
If newName is not provided, the method should throw.
If newName  is not a string, or an empty string, the method should throw. The same constraints apply for newName as they do for title in the createMovie function.
If the movie cannot be updated (does not exist), the method should throw.
if the newName is the same as the current value stored in the database, the method should throw. 
If the update succeeds, return the entire movie object as it is after it is updated.
Would return and log the updated movie

# # # app.js
For your app.js file, you will:

Create a Movie of your choice.
Log the newly created Movie. (Just that movie, not all movies)
Create another movie of your choice.
Query all movies, and log them all
Create the 3rd movie of your choice.
Log the newly created 3rd movie. (Just that movie, not all movies)
Rename the first movie
Log the first movie with the updated name. 
Remove the second movie you created.
Query all movies, and log them all
Try to create a movie with bad input parameters to make sure it throws errors.
Try to remove a movie that does not exist to make sure it throws errors.
Try to rename a movie that does not exist to make sure it throws errors.
Try to rename a movie passing in invalid data for the newName parameter to make sure it throws errors.
Try getting a movie by ID that does not exist to make sure it throws errors.

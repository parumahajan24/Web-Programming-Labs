CS-546 Lab 2
The purpose of this lab is to familiarize yourself with Node.js modules and further your understanding of JavaScript syntax.

In addition, you must have error checking for the arguments of all your functions. If an argument fails error checking, 
you should throw a string describing which argument was wrong, and what went wrong.

# # Initializing a Node.js Package
For all of the labs going forward, you will be creating Node.js packages, which have a package.json. 
To create a package, simply create a new folder and within that folder, run the command npm init. 
When it asks for a package name, name it cs-546-lab-2. You may leave the version as default and add a description if you wish. 
The entry file will be app.js.
All of the remaining fields are optional except author. For the author field, you must specify your first and last name, along with your CWID. 
In addition, You must also have a start script for your package, which will be invoked with npm start.
You can set a start script within the scripts field of your package.json.

# # arrayUtils.js
This file will export 3 functions, each of which will pertain to arrays.

1. arrayStats(array)
This function will return an object with the following stats of an array: mean, median, mode, range, minimum, maximum, count and sum. 
You will first sort the array from lowest to highest numbers before performing your calculations. 

 Note: If there is no mode, you will return 0 for that key. If there is more than one mode, you will return an array for the mode that has all the modes as elements (sorted by lowest to highest number).  
Reminder: The order of the keys of an object do not matter. For example: {a: 1, b:2. c:3} is the same as/equal to {c:3, a:1, b:2}

You must check:
That the array exists
The array is of the proper type (meaning, it's an array)
The array is not empty
Each array element is a number (can be positive, negative, decimal, zero)
If any of those conditions fail, you will throw an error.

2. makeObjects(array1, array2, array3, ........)
For this function, you will have to take into account a variable number of input parameters. You will take in arrays as input.  Each array should have two and only two elements. You will construct an object that will have the first element of each array as the key and the second element of each array as the value.  
If more than one of your arrays has the same first element, you will take the value from the last one that was passed in.  So for example:  makeObjects (["foo", "bar"], ["name", "Patrick Hill"], ["foo", "not bar"]) would return {foo: "not bar", name: "Patrick Hill"} and makeObjects (["foo", "bar"], ["name", "Patrick Hill"], ["foo", "not bar"], ["class", "CS-546"], ["name", "John Smith"], ["foo", "not bar and not 'not bar'") would return  {foo: "not bar and not 'not bar'", name: "John Smith", class: "CS-546"}
You only have to worry about primitive datatypes being used for the elements (string, boolean, number, null, undefined)

You must check:
That each input is an array
Each array is of the proper type (meaning, it's an array)
Each array is not empty
Each array has two and only two elements
If any of those conditions fail, you will throw an error.

3.commonElements(array1, array2, array3, ........)
For this function, you will have to take into account a variable number of input parameters. This function will return an array of elements that appear in every array passed as input parameters. 
If there are no element values that appear in more than one array, just return an empty array.
You only have to worry about primitive datatypes being used for the elements (string, boolean, number, null, undefined) and two dimensional arrays.

You must check:
That each input is an array and there are at LEAST two arrays passed in as input parameters.
Each array is of the proper type (meaning, it's an array)
Each array is not empty

# # stringUtils.js
This file will export 3 functions, each are useful functions when dealing with strings in JavaScript.

1. palindromes(string) 
Given a string, you will return an array with any palindromes that are contained in the string in the order in which they appear in the string.  If there are no palindromes in the string, just return an empty array. (you only have to do it for single words that are in the string, not sentences)  so for example "mom" is a palindrome which you'd have to handle, but a full sentence that is a palindrome like "A Santa dog lived as a devil god at NASA." for example, you don't have to worry about.

You must check:
That string exists.
The length of string is greater than 0 (a string with just spaces is not valid)
That string is of the proper type  (string)
If any of those conditions fails, the function will throw.

2.replaceChar(string) 
Given string you will replace every other character with alternating * and $ characters.  Spaces, punctuation special characters all count as characters!

That the string exists
The length of the string is greater than 0 (a string with just spaces is not valid)
The string is of the proper type
If any of those conditions fails, the function will throw.

3. charSwap(string1, string2) 
Given string1 and string2 return the concatenation of the two strings, separated by a space and swapping the first 4 characters of each. 

You must check:
That both strings exist
The strings are of the proper type
The length of each string is at least 4 characters. (a string with just spaces is not valid)
If any of those conditions fail, the function will throw.

# # objUtils.js
This file will export 3 functions that are useful when dealing with objects in JavaScript.

1. deepEquality(obj1, obj2)
This method checks each field (at every level deep) in obj1 and obj2 for equality. It will return true if each field is equal, and false if not. Note: Empty objects can be passed into this function. 

You must check:
That obj1 and obj2 exists and is of proper type (an Object).  If not, throw and error. 
Hint: Using recursion is the best way to solve this one.
Remember: The order of the keys is not important so: {a: 2, b: 4} is equal to {b: 4, a: 2}

2.commonKeysValues(obj1, obj2)
This method checks each field (at every level deep) in obj1 and obj2 for and finds the common key/value pairs that appear in both obj1 and obj2.  You will return an object with the common keys/value pairs.
if two empty objects are passed in or there are no common key/value pairs, just return an empty object.
You must check:

That obj1 and obj2 exists and is of proper type (an Object).  If not, throw and error. 
Remember: The order of the keys is not important so: {a: 2, b: 4} is equal to {b: 4, a: 2}

3. calculateObject(object, func)
Given an object and a function, evaluate the function on the values of the object and then calculate the square root after you evaluate the function and return a new object with the results. Note, on the result, please use the toFixed(2) function to only display 2 decimal places rounded.

You must check:
That the object exists and is of proper type (an Object).  If not, throw and error. 
That the func exists and is of proper type (a function) If not, throw and error. 
That the object values are all numbers (positive, negative, decimal).  If not, throw an error
You can assume that the correct types will be passed into the func parameter since you are checking the types of the values of the object beforehand. 

# # Testing
In your app.js file, you must import all the functions the modules you created above export and create one passing and one failing test case for each function in each module. So you will have a total of 18 function calls (there are 9 total functions)

For example:

// Mean Tests
try {
   // Should Pass
   const meanOne = mean([2, 3, 4]);
   console.log('mean passed successfully');
} catch (e) {
   console.error('mean failed test case');
}
try {
   // Should Fail
   const meanTwo = mean(1234);
   console.error('mean did not error');
} catch (e) {
   console.log('mean failed successfully');
}
